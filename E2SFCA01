import arcpy
from sys import argv

def E2SFCAdb(Provider_Data, Capacity_Field, Population_data, Population_Field, Per_Capita=100000, Distance_value_1="5 Miles", Weight1=1, Distance_value_2="10 Miles", Weight2=0.68, Distance_value_3="15 Miles", Weight3=0.22, Output_File):  # Enhanced Two Step Floating Catchment Area (using distance buffers)

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False


    # Process: Copy Features (4) (Copy Features) (management)
    Population_copy = "in_memory\\Population_copy"
    arcpy.management.CopyFeatures(in_features=Population_data.__str__().format(**locals(),**globals()), out_feature_class=Population_copy)

    # Process: Add Fields (multiple) (2) (Add Fields (multiple)) (management)
    Population_copy_9_ = arcpy.management.AddFields(in_table=Population_copy, field_description=[["zPop_id", "LONG", "", "", "", ""], ["zPop_field1", "DOUBLE", "", "", "", ""], ["zPop_field2", "DOUBLE", "", "", "", ""], ["zPop_field3", "DOUBLE", "", "", "", ""], ["FinalIndex", "DOUBLE", "finalindex", "", "", ""]])[0]

    # Process: Generate autoID (Calculate Field) (management)
    Population_copy_2_ = arcpy.management.CalculateField(in_table=Population_copy_9_, field="zPop_id", expression="autoIncrement()", code_block="""rec = 0
def autoIncrement():
    global rec
    rec += 1
    return rec

""")[0]

    # Process: Calculate Fields (multiple) (Calculate Fields (multiple)) (management)
    Population_copy_8_ = arcpy.management.CalculateFields(in_table=Population_copy_2_, expression_type="PYTHON3", fields=[["zPop_field1", f"!{Population_Field}!", ""], ["zPop_field2", f"!{Population_Field}!", ""], ["zPop_field3", f"!{Population_Field}!", ""]])[0]

    # Process: Feature To Point (Feature To Point) (management)
    Population_Points = "in_memory\\PopCentroid"
    arcpy.management.FeatureToPoint(in_features=Population_copy_8_, out_feature_class=Population_Points)

    # Process: Buffer2_1 (Buffer) (analysis)
    Pop_buffer1 = "in_memory\\Pop_buffer1"
    arcpy.analysis.Buffer(in_features=Population_Points, out_feature_class=Pop_buffer1, buffer_distance_or_field=Distance_value_1.__str__().format(**locals(),**globals()))

    # Process: Copy Features (Copy Features) (management)
    HealthServices_copy = "in_memory\\HealthServices_copy"
    arcpy.management.CopyFeatures(in_features=Provider_Data.__str__().format(**locals(),**globals()), out_feature_class=HealthServices_copy)

    # Process: Add Fields (multiple) (Add Fields (multiple)) (management)
    HealthServices_copy_4_ = arcpy.management.AddFields(in_table=HealthServices_copy, field_description=[["zServiceID", "LONG", "zserviceid", "", "", ""], ["zCapacity_copy", "DOUBLE", "zcapacity_copy", "", "", ""], ["ProtoPop1", "DOUBLE", "protopop1", "", "", ""], ["ProtoPop2", "DOUBLE", "protopop2", "", "", ""], ["ProtoPop3", "DOUBLE", "protopop3", "", "", ""]])[0]

    # Process: Auto Generate ID field (Calculate Field) (management)
    HealthServices_copy_2_ = arcpy.management.CalculateField(in_table=HealthServices_copy_4_, field="zServiceID", expression="autoIncrement()", code_block="""rec = 0
def autoIncrement():
    global rec
    rec += 1
    return rec

""", field_type="LONG")[0]

    # Process: Copy Capacity Field (Calculate Field) (management)
    HealthServices_copy_2__232 = arcpy.management.CalculateField(in_table=HealthServices_copy_2_, field="zCapacity_copy", expression=f"!{Capacity_Field}!")[0]

    # Process: Buffer1_1 (Buffer) (analysis)
    HealthServicebuffer1 = "in_memory\\HealthServicebuffer1"
    arcpy.analysis.Buffer(in_features=HealthServices_copy_2__232, out_feature_class=HealthServicebuffer1, buffer_distance_or_field=Distance_value_1.__str__().format(**locals(),**globals()))

    # Process: Spatial Join (5) (Spatial Join) (analysis)
    HealthServicebuf_SpatialJoin = "in_memory\\HealthServicebuf_SpatialJoin"
    arcpy.analysis.SpatialJoin(target_features=HealthServicebuffer1, join_features=Population_Points, out_feature_class=HealthServicebuf_SpatialJoin, field_mapping="Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServicebuffer1,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServicebuffer1,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServicebuffer1,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServicebuffer1,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,First,#,in_memory\\HealthServicebuffer1,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,First,#,in_memory\\HealthServicebuffer1,ProtoPop3,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\HealthServicebuffer1,BUFF_DIST,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\HealthServicebuffer1,ORIG_FID,-1,-1;GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\PopCentroid,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,Sum,#,in_memory\\PopCentroid,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,ORIG_FID,-1,-1")

    # Process: Join Field (Join Field) (management)
    HealthServices_copy_7_ = arcpy.management.JoinField(in_data=HealthServices_copy_2__232, in_field="zServiceID", join_table=HealthServicebuf_SpatialJoin, join_field="zServiceID", fields=["zPop_field1"])[0]

    # Process: Buffer1_2 (Buffer) (analysis)
    HealthServices_Buffer2 = "in_memory\\HealthServices_Buffer2"
    arcpy.analysis.Buffer(in_features=HealthServices_copy_2__232, out_feature_class=HealthServices_Buffer2, buffer_distance_or_field=Distance_value_2.__str__().format(**locals(),**globals()))

    # Process: Spatial Join (4) (Spatial Join) (analysis)
    HealthServices_B_SpatialJoin1 = "in_memory\\HealthServices_B_SpatialJoin1"
    arcpy.analysis.SpatialJoin(target_features=HealthServices_Buffer2, join_features=Population_Points, out_feature_class=HealthServices_B_SpatialJoin1, field_mapping="Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServices_Buffer2,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Buffer2,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer2,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer2,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer2,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer2,ProtoPop3,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer2,BUFF_DIST,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Buffer2,ORIG_FID,-1,-1;GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\PopCentroid,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,Sum,#,in_memory\\PopCentroid,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,ORIG_FID,-1,-1")

    # Process: Join Field (3) (Join Field) (management)
    HealthServices_copy_3_ = arcpy.management.JoinField(in_data=HealthServices_copy_7_, in_field="zServiceID", join_table=HealthServices_B_SpatialJoin1, join_field="zServiceID", fields=["zPop_field2"])[0]

    # Process: Buffer1_3 (Buffer) (analysis)
    HealthServices_Buffer3 = "in_memory\\HealthServices_Buffer3"
    arcpy.analysis.Buffer(in_features=HealthServices_copy_2__232, out_feature_class=HealthServices_Buffer3, buffer_distance_or_field=Distance_value_3.__str__().format(**locals(),**globals()))

    # Process: Spatial Join (Spatial Join) (analysis)
    HealthServices_B_SpatialJoin = "in_memory\\HealthServices_B_SpatialJoin"
    arcpy.analysis.SpatialJoin(target_features=HealthServices_Buffer3, join_features=Population_Points, out_feature_class=HealthServices_B_SpatialJoin, field_mapping="Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServices_Buffer3,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Buffer3,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer3,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer3,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer3,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer3,ProtoPop3,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Buffer3,BUFF_DIST,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Buffer3,ORIG_FID,-1,-1;GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\PopCentroid,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\PopCentroid,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,Sum,#,in_memory\\PopCentroid,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\PopCentroid,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\PopCentroid,ORIG_FID,-1,-1")

    # Process: Join Field (4) (Join Field) (management)
    HealthServices_copy_5_ = arcpy.management.JoinField(in_data=HealthServices_copy_3_, in_field="zServiceID", join_table=HealthServices_B_SpatialJoin, join_field="zServiceID", fields=["zPop_field3"])[0]

    # Process: Calculate Fields (multiple) (2) (Calculate Fields (multiple)) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        HealthServices_copy_6_ = arcpy.management.CalculateFields(in_table=HealthServices_copy_5_, expression_type="PYTHON3", fields=[["ProtoPop1", f"!zCapacity_copy! * {Per_Capita} / FUN (!zPop_field1! , !zPop_field2! , !zPop_field3!, {Weight1},{Weight2},{Weight3})", ""], ["ProtoPop2", f"!zCapacity_copy! * {Per_Capita}  / FUN (!zPop_field1! , !zPop_field2! , !zPop_field3!, {Weight1},{Weight2},{Weight3})", ""], ["ProtoPop3", f"!zCapacity_copy! * {Per_Capita}  / FUN (!zPop_field1! , !zPop_field2! , !zPop_field3!, {Weight1},{Weight2},{Weight3})", ""]], code_block="""def FUN(pop1, pop2, pop3, w1, w2, w3):
    pop1 = 0 if pop1 is None else pop1
    pop2 = 0 if pop2 is None else pop2
    pop3 = 0 if pop3 is None else pop3

    term1 = w1 * pop1
    term2 = w2 * (pop2 - pop1)
    term3 = w3 * (pop3 - pop2)

    return term1 + term2 + term3""")[0]

    # Process: Copy Features (2) (Copy Features) (management)
    First_Step_output = "in_memory\\HealthServices_Exported"
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        arcpy.management.CopyFeatures(in_features=HealthServices_copy_6_, out_feature_class=First_Step_output)

    # Process: Spatial Join (6) (Spatial Join) (analysis)
    Pop_buffer_SpatialJoined1 = "in_memory\\Pop_buffer_SpatialJoined1"
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        arcpy.analysis.SpatialJoin(target_features=Pop_buffer1, join_features=First_Step_output, out_feature_class=Pop_buffer_SpatialJoined1, field_mapping="GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\Pop_buffer1,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer1,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer1,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer1,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer1,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer1,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer1,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer1,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer1,ORIG_FID,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer1,BUFF_DIST,-1,-1;Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServices_Exported,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,Sum,#,in_memory\\HealthServices_Exported,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop3,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field3,-1,-1")

    # Process: Join Field (2) (Join Field) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        Population_copy_4_ = arcpy.management.JoinField(in_data=Population_copy_2_, in_field="zPop_id", join_table=Pop_buffer_SpatialJoined1, join_field="zPop_id", fields=["ProtoPop1"])[0]

    # Process: Buffer2_2 (Buffer) (analysis)
    Pop_buffer2 = "in_memory\\Pop_buffer2"
    arcpy.analysis.Buffer(in_features=Population_Points, out_feature_class=Pop_buffer2, buffer_distance_or_field=Distance_value_2.__str__().format(**locals(),**globals()))

    # Process: Spatial Join (3) (Spatial Join) (analysis)
    Pop_buffer_SpatialJoined2 = "in_memory\\Pop_buffer_SpatialJoined2"
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        arcpy.analysis.SpatialJoin(target_features=Pop_buffer2, join_features=First_Step_output, out_feature_class=Pop_buffer_SpatialJoined2, field_mapping="GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\Pop_buffer2,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer2,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer2,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer2,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer2,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer2,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer2,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer2,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer2,ORIG_FID,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer2,BUFF_DIST,-1,-1;Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServices_Exported,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,Sum,#,in_memory\\HealthServices_Exported,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop3,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Long 0 0,Sum,#,in_memory\\HealthServices_Exported,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field3,-1,-1")

    # Process: Join Field (5) (Join Field) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        Population_copy_2__287 = arcpy.management.JoinField(in_data=Population_copy_4_, in_field="zPop_id", join_table=Pop_buffer_SpatialJoined2, join_field="zPop_id", fields=["ProtoPop2"])[0]

    # Process: Buffer2_3 (Buffer) (analysis)
    Pop_buffer3 = "in_memory\\Pop_buffer3"
    arcpy.analysis.Buffer(in_features=Population_Points, out_feature_class=Pop_buffer3, buffer_distance_or_field=Distance_value_3.__str__().format(**locals(),**globals()))

    # Process: Spatial Join (2) (Spatial Join) (analysis)
    Pop_buffer_SpatialJoined3 = "in_memory\\Pop_buffer_SpatialJoined3"
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        arcpy.analysis.SpatialJoin(target_features=Pop_buffer3, join_features=First_Step_output, out_feature_class=Pop_buffer_SpatialJoined3, field_mapping="GEOID \"GEOID\" true true false 11 Text 0 0,First,#,in_memory\\Pop_buffer3,GEOID,0,11;Totalpop \"Totalpop\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer3,Totalpop,-1,-1;WeightedPo \"WeightedPo\" true true false 10 Long 0 10,First,#,in_memory\\Pop_buffer3,WeightedPo,-1,-1;zPop_id \"zPop_id\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer3,zPop_id,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer3,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer3,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer3,zPop_field3,-1,-1;FinalIndex \"finalindex\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer3,FinalIndex,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,in_memory\\Pop_buffer3,ORIG_FID,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0,First,#,in_memory\\Pop_buffer3,BUFF_DIST,-1,-1;Capacity \"Capacity\" true true false 10 Long 0 10,First,#,in_memory\\HealthServices_Exported,Capacity,-1,-1;zServiceID \"zserviceid\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zServiceID,-1,-1;zCapacity_copy \"zcapacity_copy\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zCapacity_copy,-1,-1;ProtoPop1 \"protopop1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop1,-1,-1;ProtoPop2 \"protopop2\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,ProtoPop2,-1,-1;ProtoPop3 \"protopop3\" true true false 0 Double 0 0,Sum,#,in_memory\\HealthServices_Exported,ProtoPop3,-1,-1;zPop_field1 \"zPop_field1\" true true false 0 Double 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field1,-1,-1;zPop_field2 \"zPop_field2\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field2,-1,-1;zPop_field3 \"zPop_field3\" true true false 0 Long 0 0,First,#,in_memory\\HealthServices_Exported,zPop_field3,-1,-1")

    # Process: Join Field (6) (Join Field) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        Population_copy_6_ = arcpy.management.JoinField(in_data=Population_copy_2__287, in_field="zPop_id", join_table=Pop_buffer_SpatialJoined3, join_field="zPop_id", fields=["ProtoPop3"])[0]

    # Process: Calculate Field (3) (Calculate Field) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        Population_copy_7_ = arcpy.management.CalculateField(in_table=Population_copy_6_, field="FinalIndex", expression=f"FUN(!ProtoPop1!,!ProtoPop2!,!ProtoPop3!,{Weight1},{Weight2},{Weight3})", code_block="""def FUN(pop1, pop2, pop3, w1, w2, w3):
    pop1 = 0 if pop1 is None else pop1
    pop2 = 0 if pop2 is None else pop2
    pop3 = 0 if pop3 is None else pop3

    term1 = w1 * pop1
    term2 = w2 * (pop2 - pop1)
    term3 = w3 * (pop3 - pop2)

    return term1 + term2 + term3""")[0]

    # Process: Delete Field (Delete Field) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        Population_copy_5_ = arcpy.management.DeleteField(in_table=Population_copy_7_, drop_field=["zPop_id", "zPop_field1", "zPop_field2", "zPop_field3"])[0]

    # Process: Copy Features (3) (Copy Features) (management)
    if int(Per_Capita) and float(Weight1) and float(Weight2) and float(Weight3):
        arcpy.management.CopyFeatures(in_features=Population_copy_5_, out_feature_class=Output_File.__str__().format(**locals(),**globals()))

    # Process: Get_Field_Value_2_ (Get Field Value) 
    # Get Field Value Utility is not implemented 

    # Process: Get_Field_Value_4_ (Get Field Value) 
    # Get Field Value Utility is not implemented 

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager():
        E2SFCAdb(*argv[1:])
